version: "2"
services:
  nacos:
    image: nacos/nacos-server:v2.1.0
    # container_name: nacos
    env_file:
      - ../env/nacos-standlone-mysql.env
    volumes:
      - ./standalone-logs/:/home/nacos/logs
      - ./init.d/custom.properties:/home/nacos/init.d/custom.properties
    ports:
      - "58848:8848"
      - "59848:9848"
      - "59555:9555"
    depends_on:
      - mysql
    restart: always

  mysql:
    container_name: mysql
    image: nacos/nacos-mysql:8.0.16
    # docker安全验证
    security_opt:
      - seccomp:unconfined
    env_file:
      - ../env/mysql.env
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "32309:3306"

  redis:
    container_name: redis
    image: redis
    ports:
      - "36679:6379"
    #指定挂载目录
    #redis.conf文件和data目录分别映射了主机的redis.conf文件和主机的data目录
    #使用command可以覆盖容器启动后默认执行的命令
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:rw
      - ./redis/data:/data:rw
    command:
      /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf"
    restart: always
    privileged: true

  rabbitmq:
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_VHOST: "/devops"
      RABBITMQ_DEFAULT_USER: "devops"
      RABBITMQ_DEFAULT_PASS: "devops"
    image: "rabbitmq:3.7.16-management"
    restart: always
    volumes:
      - "./data:/var/lib/rabbitmq"
      - "./log:/var/log/rabbitmq/log"
    ports:
      - "35677:15672"
      - "34369:4369"
      - "35673:5672"
      - "25672:25672"

  eazybuilder-web:
    build: ../eazybuilder-web/src/main/docker
    ports:
      - "30091:80"
    volumes:
     - ./nginx/config/conf.d/default.conf:/etc/nginx/conf.d/default.conf
     - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf
     - ./nginx/logs:/var/log/nginx/
    privileged: true # 这个必须要，解决nginx的文件调用的权限问题
    restart: always

  eazybuilder-server:
    build:
      context: ../eazybuilder-server/pipeline/jenkins-client/src/main/docker
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - redis
      - rabbitmq
      - mysql
      - nacos


    # jenkins:
  #   image: jenkins/jenkins:lts
  #   volumes:
  #     - ./jenkins/jenkins_home:/var/jenkins_home
  #     - ./jenkins/run/docker.sock:/var/run/docker.sock
  #     - ./jenkins/bin/docker:/usr/bin/docker
  #     - ./jenkins/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7
  #   ports:
  #     - "8090:8080"
  #   expose:
  #     - "8080"
  #     - "50000"
  #   privileged: true
  #   user: root
  #   restart: always
  #   container_name: jenkins
  #   environment:
  #     JAVA_OPTS: '-Djava.util.logging.config.file=/var/jenkins_home/log.properties'

  # sonarqube:
  #   image: sonarqube:8.9.2-community
  #   restart: always
  #   command: -Dsonar.web.context=/sonarqube -Dsonar.search.javaOpts=-Xmx2g -Dsonar.ce.javaOpts=-Xmx2g
  #   environment:
  #     - JAVA_OPTS=-Xmx1g
  #     - SONARQUBE_JDBC_USERNAME=sonar
  #     - SONARQUBE_JDBC_PASSWORD=sonar
  #     - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
  #     - sonar.search.javaOpts=-Xms256m -Xmx256m -XX:+HeapDumpOnOutOfMemoryError
  #   ports:
  #     - "19000:9000"
  #   links:
  #    - "postgres:postgres"
  #   volumes:
  #     - ./sonarqube/sonarqube-data:/opt/sonarqube/data
  #     - ./sonarqube/sonarqube-tmp:/opt/sonarqube/temp
  #   depends_on:
  #     - postgres
  # postgres:
  #    image: postgres:13
  #    restart: always
  #    ports:
  #     - "35455:5432"
  #    environment:
  #     - POSTGRES_PASSWORD=sonar
  #     - POSTGRES_USER=sonar
  #     - POSTGRES_DB=sonar
  #    volumes:
  #     - ./postgres/data:/var/lib/postgresql/data